get pkg-config from https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz
get glib-dev from https://download.gnome.org/binaries/win64/glib/2.26/

in pkg-config, mkdir release\x64\pkg-config and then run nmake /f Makefile.vc CFG=release GLIB_PREFIX="C:\msys64\home\jheaffey\git\rules_foreign_cc"

note that at run time it depends on various things, run "ldd" in mingw64 msys2, e.g. glib-runtime (https://download.gnome.org/binaries/win64/glib/2.26/), iconv etc

for linux, use ./configure --internal-glib or whatever it is

----
try to resolve - https://github.com/bazelbuild/rules_foreign_cc/issues/391, i.e pkg-config needs to be run with dlls, as will qt binaries. Could make a wrapper script that sets PATH on win or LD_LBIRARY_PATH on linux. Ideally the binaries produced by rules_foreign_cc will be like cc_binaries

Seems like there is a CcLauncherInfo but can only be used in native java, which copies dlls to the binary dir

What can I do instead? I can write a sh_binary that sets the PATH variable when being run

make a macro that uses bin output group to make a sh_binary


------

in the examples folder, run "bazel run @rules_foreign_cc//toolchains:pkgconfig_tool --enable_runfiles"

why is running the above causing infinite pkg-configs to be run?
Why when building openssl is pkgconfig not first built?

----
Get examples :blob invoking pkg config build

Try reverting pkgconfg_tool to be the sh_binary

Maybe native_binary doesnâ€™t set transitive runfiles properly
Check runnable bin works on Linux ie runnable OpenSSL

----
instead of skylib, wrap sh_binary in a genrule that produces a bat script, this is required for windows only

Try filegroup workaround - https://github.com/bazelbuild/bazel/issues/12348
Try building log4cxx (which required pkg config) in a docker container with no pkg config

if cant get it working, could use this - https://sourceforge.net/projects/pkgconfiglite/