load("@rules_cc//cc:defs.bzl", "cc_import")
load("@rules_foreign_cc//foreign_cc:defs.bzl", "cmake")

cc_import(
    name = "libhello_import",
    hdrs = ["hello.h"],
    interface_library = "libhello.lib",
    shared_library = "libhello.dll",
    visibility = ["//visibility:public"],
)

cc_library(
    name = "blob",
    hdrs = ["hello.h"],
    visibility = ["//visibility:public"],
    deps = ["libhello_import"],
)

filegroup(
    name = "srcs",
    srcs = glob(["**"]),
    visibility = ["//visibility:public"],
)
cmake(
    name = "libhello",
    # Probably this variable should be set by default.
    # Apparently, it needs to be set for shared libraries on Mac OS
    cache_entries = {
        "CMAKE_MACOSX_RPATH": "True",
        "CMAKE_SHARED_LINKER_FLAGS": "",
        "CMAKE_EXE_LINKER_FLAGS": "",
        "CMAKE_CXX_FLAGS_INIT": "",
        "CMAKE_C_FLAGS_INIT": "",
    },
    generate_args = select({
        # TODO: The use of Visual Studio generator targets are broken. These should
        # be re-enabled pending a resolution to
        # https://github.com/bazelbuild/continuous-integration/issues/1204
        "@platforms//os:windows": ["-GNinja"],
        "//conditions:default": [],
    }),
    generate_crosstool_file = False,
    lib_source = ":srcs",
    out_shared_libs = select({
        "//:macos": ["libhello.dylib"],
        "//:windows": ["libhello.dll"],
        "//conditions:default": ["libhello.so"],
    }),
    out_interface_libs = select({
        "//:windows": ["libhello.lib"],
        "//conditions:default": [""],
    }),
    # TODO: The `.dll` is installed in the `bin` directory. To account for this, windows
    # moves it to the `lib` directory. The rules should account for this case.
    postfix_script = select({
        "//:windows": "cp -p $$INSTALLDIR$$/bin/libhello.dll $$INSTALLDIR$$/lib",
        "//conditions:default": None,
    }),
    tool_prefix = "unset CC CXX CFLAGS CXXFLAGS ASMFLAGS &&",
    visibility = ["//visibility:public"],
)
