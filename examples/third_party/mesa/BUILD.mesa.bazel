load("@rules_foreign_cc//foreign_cc:defs.bzl", "meson_with_requirements")
load("@pip//:requirements.bzl", "requirement")

filegroup(
    name = "all_srcs",
    srcs = glob(["**"]),
)

#meson(
#    name = "mesa",
#    lib_source = ":all_srcs",
#    visibility = ["//visibility:public"]
#)

# TODO mesa depends on zlib, if not specified here then meson will fetch and build it

# TODO define this config_setting only once rather than in a few places
config_setting(
    name = "msvc_compiler",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "msvc-cl",
    },
)


meson_with_requirements(
    name = "mesa",
    lib_source = ":all_srcs",
    requirements = [
        requirement("mako"),
    ],
    build_data = select({
        "@bazel_tools//src/conditions:host_windows": ["@winflexbison//:gen_dir"],
        "//conditions:default": ["@bison//:gen_dir", "@flex//:flex_exe", "@m4//:m4_exe"]
    }),
    env = select({
        "@bazel_tools//src/conditions:host_windows": {
            "PATH": "$$(dirname $$EXT_BUILD_ROOT$$/$(location @winflexbison//:gen_dir))/winflexbison:$$(dirname $$EXT_BUILD_ROOT$$/$(PYTHON3)):$$PATH",
        },
        "//conditions:default": {
            #TODO rather than dirname etc, add bison and flex in the same way as m4
            "PATH": "$$(dirname $$EXT_BUILD_ROOT$$/$(location @bison//:gen_dir))/bison/bin:$$(dirname $$EXT_BUILD_ROOT$$/$(location @flex//:flex_exe)):$$EXT_BUILD_DEPS$$/bin/m4/bin/:$$(dirname $$EXT_BUILD_ROOT$$/$(PYTHON3)):$$PATH",
            #TODO see if i can set BISON and FLEX variables like M4 below and see if meson picks them up
            "M4": "$$EXT_BUILD_ROOT$$/$(location @m4//:m4_exe)",
            # TODO use ext_build_deps instead of location:
            "BISON_PKGDATADIR": "$$(dirname $$EXT_BUILD_ROOT$$/$(location @bison//:gen_dir))/bison/share/bison"
        },
        }),
    out_shared_libs = select({
        ":msvc_compiler": [
            "libgallium_wgl.dll",
            "opengl32.dll",
        ],
        "//conditions:default": [
            "libEGL.so",
            "libgbm.so",
            "libglapi.so",
            "libGLESv1_CM.so",
            "libGLESv2.so",
            "libvulkan_intel.so",
            "libxatracker.so"
        ],
    }),
    out_interface_libs = select({
        ":msvc_compiler": [
            "libgallium_wgl.lib",
            "opengl32.lib"
        ],
        "//conditions:default": [],
    }),
    deps = select({
        "@platforms//os:linux": [
            "@bison",
            "@libpciaccess",
            "@libdrm",
            "@libxcb",
            "@libxshmfence",
            "@expat",
            "@libxau",
            "@xorgproto",
            "@libxdmcp",
            "@libx11",
            "@libxrandr",
            "@libxext",
            "@libxrender",
        ],
        "//conditions:default": [],
    }),
    # TODO have select on linux here, and say that we are disabling because building llvm would make our CI take forever
    options = select({
            "@platforms//os:linux": {
                "llvm": "disabled",
                "vulkan-drivers": "intel",
                "gallium-drivers": "nouveau",
                # have platform set to windows on windows
                "platforms": "x11",
                "glx": "disabled"
            },
            "//conditions:default": {},
    }),
    out_lib_dir = select({
        "@platforms//os:linux": "lib/x86_64-linux-gnu",
        "//conditions:default": "lib",
    }),
    toolchains = ["@rules_python//python:current_py_toolchain"],
    visibility = ["//visibility:public"]
)


# bison doesnt seem to work when in sandbox, need to replace_in_files for something.