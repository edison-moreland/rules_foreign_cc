"""An openssl build file based on a snippet found in the github issue:
https://github.com/bazelbuild/rules_foreign_cc/issues/337
"""

load("@rules_foreign_cc//foreign_cc:defs.bzl", "configure_make")

# Read https://wiki.openssl.org/index.php/Compilation_and_Installation

config_setting(
    name = "msvc_compiler",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "msvc-cl",
    },
)

filegroup(
    name = "all_srcs",
    srcs = glob(["**"]),
)

CONFIGURE_OPTIONS = [
    "no-comp",
    "no-idea",
    "no-weak-ssl-ciphers",
    "no-shared",
]

##TODO handle MSVC and mingw
configure_make(
    name = "openssl",
    build_data = select({
        ":msvc_compiler": [
            "@nasm//:nasm",
            "@perl//:perl",
        ],
        "//conditions:default": [],
    }),
    configure_command = select({
        ":msvc_compiler": "Configure",
        "//conditions:default": "config",
    }),
    configure_in_place = True,
    configure_options = CONFIGURE_OPTIONS + select({
        ":msvc_compiler": [
            "VC-WIN64A",

            # Unset Microsoft Assembler (MASM) flags set by built-in MSVC toolchain,
            # as NASM is unsed to build OpenSSL rather than MASM
            "ASFLAGS=\" \"",
        ],
        "//conditions:default": [],
    }),
    configure_prefix = select({
        ":msvc_compiler": "$PERL",
        "//conditions:default": "",
    }),
    # rather than adding to path, try setting PERL and NASM variables
    # set the AS variable to the path of nasm
    env = select({
        "@platforms//os:macos": {"AR": ""},
        ":msvc_compiler": {
            #TODO adding PATH var here overwrites the PATH that includes toolchain directories, therefore nmake isnt on the path. See get_env_prelude of framework.bzl
            "PATH": "$(dirname $(execpath @nasm//:nasm)):$PATH",
            "PERL": "$(execpath @perl//:perl)",
            # The Zi flag must be set otherwise OpenSSL fails to build due to missing .pdb files
            "CFLAGS": "-Zi",
        },
        "//conditions:default": {},
    }),
    lib_source = ":all_srcs",
    out_static_libs = select({
        ":msvc_compiler": [
            "libcrypto.lib",
            "libssl.lib",
        ],
        "//conditions:default": [
            "libcrypto.a",
            "libssl.a",
        ],
    }),
    targets = [
        "build_libs",
        "install_dev",
    ],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "gen_dir",
    srcs = [":openssl"],
    output_group = "gen_dir",
    visibility = ["//visibility:public"],
)
